@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject IHttpContextAccessor HttpContextAccessor

@if (!confirmed)
{
    <EditForm Model="@credentials" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="password">Mot de passe AD</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="credentials.Password" />
        </div>
        <p>&nbsp;</p>
        <div class="mb-3">
            <button class="btn btn-primary" disabled="@isLoading">
                @(isLoading ? "Vérification..." : "Confirmer")
            </button>
        </div>
    </EditForm>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center align-items-center flex-column mt-4">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Chargement...</span>
            </div>
            <p class="mt-2 text-muted">Vérification du mot de passe AD en cours...</p>
        </div>
    }

    @if (failed)
    {
        <p class="text-danger mt-2">❌ Mot de passe incorrect ou échec de vérification AD.</p>
    }
}
else
{
    @ChildContent
}

@code {
    [Parameter] public EventCallback OnConfirmed { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private CredentialModel credentials = new();
    private bool confirmed = false;
    private bool failed = false;
    private bool isLoading = false;

    private async Task HandleSubmit()
    {
        isLoading = true;
        failed = false;

        var identityName = HttpContextAccessor.HttpContext?.User?.Identity?.Name;
        if (string.IsNullOrWhiteSpace(identityName))
        {
            failed = true;
            isLoading = false;
            return;
        }

        var parts = identityName.Split('\\');
        if (parts.Length != 2)
        {
            failed = true;
            isLoading = false;
            return;
        }

        var domain = parts[0];
        var login = parts[1];

        await Task.Delay(1000); // Petite attente pour laisser le spinner s'afficher

        if (ValidateUserAgainstAD(domain, login, credentials.Password))
        {
            confirmed = true;
            await OnConfirmed.InvokeAsync();
        }
        else
        {
            failed = true;
        }

        isLoading = false;
    }

    private bool ValidateUserAgainstAD(string domain, string username, string password)
    {
        try
        {
            using var context = new System.DirectoryServices.AccountManagement.PrincipalContext(
                System.DirectoryServices.AccountManagement.ContextType.Domain, domain);
            return context.ValidateCredentials(username, password);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur AD : {ex.Message}");
            return false;
        }
    }

    private class CredentialModel
    {
        [Required(ErrorMessage = "Mot de passe requis")]
        public string Password { get; set; } = "";
    }
}