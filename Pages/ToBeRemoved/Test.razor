@page "/test-db"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using GestionBudgétaire.Data
@using GestionBudgétaire.Data.Entities.Database
@using GestionBudgétaire.Data.Services.ToBeRemoved
@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

@inject TestService TestService

@* Page de test permet de contrôler l'accès à la base de données *@

<h3>Données de la table Dialogue</h3>

@if (!isAuthorized)
{
    <p class="text-danger">Accès refusé. Vous n'avez pas les droits nécessaires.</p>
}
else if (dialogues == null)
{
    <p>Chargement des données...</p>
}
else if (!dialogues.Any())
{
    <p>Aucune donnée trouvée.</p>
}
else
{
    <table class="table" Style="width: 100%;">
        <thead>
            <tr>
                <th>DG_CODE</th>
                <th>FOURNISSEUR</th>
                <th>LIBELLE_DU_MARCHE</th>
                <th>MONTANT_TTC</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in dialogues)
            {
                <tr>
                    <td>@item.DG_CODE</td>
                    <td>@item.FOURNISSEUR</td>
                    <td>@item.LIBELLE_DU_MARCHE</td>
                    <td>@item.MONTANT_TTC</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Dialogue>? dialogues;
    private bool isAuthorized = false;
    //private ClaimsPrincipal? user;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"OnInitializedAsync test.razor - /test-db");

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            isAuthorized = user.Claims
                .Where(c => c.Type == ClaimTypes.Role)
                .Any(c => c.Value == "Admin");

            if (!isAuthorized)
            {
                NavigationManager.NavigateTo("/non-authoriser", forceLoad: true);
                return;
            }

            try
            {
                dialogues = await TestService.GetDialoguesAsync();
                dialogues = dialogues.Take(10).ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erreur lors de la récupération des données : {ex.Message}");
            }
        }
    }
}