@using BlazorBootstrap
@implements IDisposable
@using Radzen

@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider

@inject NavigationManager NavigationManager

<nav class="navbar navbar-expand-md navbar-light mb-4 navbar-fixed" style="background-color: #e8c600;">
    <div class="container-fluid">
        <!--<a class="navbar-brand" href=""> 147af3 DDG</a>-->
        <a class="navbar-brand" href="">
            <img src="logoU.svg" alt="DDG Logo" style="height: 40px;" />
        </a>
        <link rel="icon" type="image/png" href="icone1.jpg" />
        <button class="navbar-toggler @NavButtonCssClass" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                aria-controls="navbarCollapse" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse @NavBarCssClass" id="navbarCollapse">
            <RadzenMenu Orientation="Horizontal" Style="width: 100%;" class="custom-radzen-menu">
                <RadzenMenuItem Style="margin-left: 0px;" Text="Accueil" Path="/" Icon="home" />

                <!-- Groupe Edit -->
                <RadzenMenuItem Style="margin-left: 5px;" Text="Consulter" Icon="edit">
                    <RadzenMenuItem Text="Vue" Path="edition" Icon="check_box" class="custom-submenu-item" />
                    <RadzenMenuItem Text="Edition" Path="genericedit" Icon="check_box" class="custom-submenu-item" />
                    <RadzenMenuItem Text="User Role" Path="appuserroles" Icon="check_box" class="custom-submenu-item" />
                </RadzenMenuItem>

                <!-- Groupe Tests -->
                <RadzenMenuItem Style="margin-left: 5px;" Text="Tests" Icon="add_box">
                    <!--<RadzenMenuItem Text="Sensible" Path="sensible" Icon="add_box" class="custom-submenu-item" />
                    <RadzenMenuItem Text="Test-Database" Path="test-db" Icon="add_box" class="custom-submenu-item" /> -->
                    <RadzenMenuItem Text="Menu" Path="menu" Icon="add_box" class="custom-submenu-item" />
                    <RadzenMenuItem Text="Vue filtrée" Path="edition2" Icon="add_box" class="custom-submenu-item" />
                </RadzenMenuItem>

                @if (HasRole("Admin"))
                {
                    <RadzenMenuItem Style="margin-left: 5px;" Text="Ajouter" Icon="add_box">
                        <RadzenMenuItem Text="Dialogue" Path="test-db" Icon="add_box" class="custom-submenu-item" />
                        <RadzenMenuItem Text="Ligne budgétaire" Path="sensible" Icon="add_box" class="custom-submenu-item" />
                    </RadzenMenuItem>
                }

            </RadzenMenu>

            @if (user != null && user.Identity?.IsAuthenticated == true)
            {
                <div class="d-flex align-items-center ms-auto me-2" style="background-color: #e8c600; border-radius: 20px; padding: 5px 15px;">
                    <span class="me-2 text-dark fw-bold">@username</span>
                    <RadzenProfileMenu Style="background-color: #e8c600;">
                        <Template>
                            <RadzenGravatar Email="@($"{username}@example.com")" Style="width: 40px; height: 40px;" />
                        </Template>
                        <ChildContent>
                            <RadzenProfileMenuItem Text="Infos" Icon="person" Path="user-info" />
                            <RadzenProfileMenuItem Text="Paramètres" Icon="settings" Path="/" />
                            <RadzenProfileMenuItem Text="Déconnexion" Icon="logout" Click="@(() => Logout())" />
                        </ChildContent>
                    </RadzenProfileMenu>
                </div>
            }


        </div>
    </div>
</nav>

<style>
    .navbar-fixed {
        position: fixed;
        top: 0;
        width: 100%;
        z-index: 1000; /* Assurez-vous que la barre de navigation est au-dessus du reste du contenu */
        background-color: #147af3; /* Maintient la couleur de fond */
    }

    .custom-radzen-menu {
        background-color: transparent !important; /* Rendre le menu transparent */
        box-shadow: none !important; /* Supprimer l'ombre par défaut du RadzenMenu */
    }

    /* Arrière-plan pour les sous-menus sous Edit */
    .custom-submenu-item {
        background-color: #e8c600; /* Couleur de fond pour les sous-onglets */
        border-radius: 5px;
        padding: 10px;
        margin: 5px 0;
    }

    /* Espacement entre les éléments du menu principal */
    .custom-radzen-menu .rz-menu-item {
        padding: 10px 15px !important;
        margin: 0 10px;
    }

    .container-fluid {
        padding-top: 0px;
    }
</style>

@code {
    private bool collapseNavMenu = true;
    private string? NavBarCssClass => collapseNavMenu ? null : "show";
    private string? NavButtonCssClass => collapseNavMenu ? "collapsed" : null;
    private string? currentUrl;

    private ClaimsPrincipal? user;
    private List<string> roles = new();
    private string? username;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            username = user.Identity.Name;
            roles = user.Claims
                .Where(c => c.Type == ClaimTypes.Role)
                .Select(c => c.Value)
                .ToList();
        }

        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private bool HasRole(string role) => roles.Contains(role);

    private void Logout()
    {
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

}
