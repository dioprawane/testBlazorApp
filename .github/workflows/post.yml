name: Post-merge versioning

on:
  push:
    branches: [ master ]
  pull_request: # Ã€ chaque pull request jkhqskjrdghjkdg
    branches:
      - master        # Vers master

jobs:
  version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - uses: gittools/actions/gitversion/setup@v0.12.0
        with:
          versionSpec: '6.3.0'

      - id: gitversion
        uses: gittools/actions/gitversion/execute@v0.12.0

      - name: Wait for 30 seconds
        if: github.ref == 'refs/heads/master' || github.base_ref == 'master'
        run: sleep 59

      - name: Force minor increment and write AssemblyInfo.cs
        if: github.ref == 'refs/heads/master' || github.base_ref == 'master'
        run: |
          major=${{ steps.gitversion.outputs.major }}
          minor=${{ steps.gitversion.outputs.minor }}
          patch=${{ steps.gitversion.outputs.patch }}
          build=${{ steps.gitversion.outputs.buildMetaData }}

          new_minor=$((minor + 1))
          new_version="$major.$new_minor.$patch.$build"

          echo "New version: $new_version"

          mkdir -p Properties
          cat > Properties/AssemblyInfo.cs <<EOF
          using System.Reflection;
          [assembly: AssemblyVersion("$new_version")]
          [assembly: AssemblyFileVersion("$new_version")]
          [assembly: AssemblyInformationalVersion("$new_version")]
          EOF

      - name: Commit AssemblyInfo.cs
        if: github.ref == 'refs/heads/master' || github.base_ref == 'master'
        run: |
          minor=${{ steps.gitversion.outputs.minor }}
          next_minor=$((minor + 1))
          patch=${{ steps.gitversion.outputs.patch }}

          if [[ $(git status --porcelain) ]]; then
            git add Properties/AssemblyInfo.cs
            git commit -m "chore: force minor bump to 0.${next_minor}.${patch} [skip ci]"
            git push --force origin master
          fi

      - name: Tag new version
        if: github.ref == 'refs/heads/master' || github.base_ref == 'master'
        run: |
          minor=${{ steps.gitversion.outputs.minor }}
          next_minor=$((minor + 1))
          patch=${{ steps.gitversion.outputs.patch }}
          TAG="v0.${next_minor}.${patch}"

          git tag -a "$TAG" -m "Version $TAG"
          git push --force origin "$TAG"
