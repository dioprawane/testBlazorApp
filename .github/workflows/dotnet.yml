# Nom du workflow visible sur GitHub
name: .NET Actions

# Quand déclencher ce workflow
on:
  push: # À chaque push test tag
    branches:
      - master        # Sur la branche master
  pull_request: # À chaque pull request
    branches:
      - master        # Vers master
      - features      # Vers features
    paths-ignore:
      - TestGitVersion.cs
      - Properties/AssemblyInfo.cs

# Définition des tâches à exécuter
jobs:
  build:
    runs-on: ubuntu-latest   # Utilise la dernière version d'une VM Ubuntu hébergée par GitHub

    # Liste des actions à effectuer
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4  # Clone le code source du dépôt/Récupère les fichiers du dépôt
      with:
        fetch-depth: 0  # Permet à GitVersion d’avoir l'historique complet   
    
    - name: Write TestGitVersion.cs file
      uses: DamianReeves/write-file-action@master
      with:
        path: TestGitVersion.cs
        write-mode: overwrite
        contents: |
          // Fichier généré automatiquement par GitHub Actions
          using System;

          namespace AutoGenerated
          {
              public static class TestGitVersion
              {
                  public static void Print()
                  {
                      Console.WriteLine("Fichier généré automatiquement depuis GitHub Actions à la date du ${date}");
                      Console.WriteLine("Last Test");
                  }
              }
          }

    - name: Commit TestGitVersion.cs UNIQUEMENT dans la branche cible
      if: github.ref == 'refs/heads/master' || github.base_ref == 'master' || github.base_ref == 'features'
      uses: Andro999b/push@v1.3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.base_ref }}
        force: true
        message: 'Ajout automatique de TestGitVersion.cs avant merge dans ${{ github.base_ref }}'

    - name: Clone main project GestionBudget
      run: git clone https://github.com/dioprawane/testBlazorApp.git ../GestionBudget

    - name: Clone test project
    # Clonage du projet de tests depuis un dépôt externe
      run: git clone https://github.com/dioprawane/GestionBudgetTest.git ../GestionBudgetTest

    - name: Install .NET sdk
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.302'  # Installe la version 8.0.302 .NET du SDK 

    # Ces étapes sont utilisées pour se connecter à MySQL
    # - name: Set environment variables
    #   run: echo "PASSWORDMYSQL=${{ secrets.PASSWORDMYSQL }}" >> $GITHUB_ENV

    # - name: Install MySQL Client
    #   run: sudo apt-get install -y mysql-client

    # - name: Test MySQL Connection
    #   env:
    #     PASSWORDMYSQL: ${{ secrets.PASSWORDMYSQL }}
    #   run: |
    #     mysql --host=pro69valo.urdom.ad.recouv --user=perfeco --password=$PASSWORDMYSQL dialogue_gestion -e "SHOW DATABASES;"

    - name: Intallation/Restauration des dépendances
      #run: dotnet restore    # Restaure/installe les dépendances NuGet
      # Restaure/installe les dépendances NuGet des projets de base et de tests
      run: |
        dotnet restore GestionBudgétaire.csproj
        dotnet restore ../GestionBudgetTest/GestionBudgetaireTest.csproj

    - name: Install GitVersion 
    # Installer la version 6.3.0 de GitVersion (outil de gestion de version basé sur Git)
      uses: gittools/actions/gitversion/setup@v0.12.0
      with:
        versionSpec: '6.3.0'

    - name: Run GitVersion
    # Exécute GitVersion pour générer les métadonnées de version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.12.0

    - name: Show GitVersion output
    # Affiche la version générée par GitVersion dans les logs
      run: |
        echo "GitVersion (fullSemVer): ${{ steps.gitversion.outputs.fullSemVer }}"

    - name: Inject version into AssemblyInfo.cs
    # Injecte la version GitVersion dans le fichier AssemblyInfo.cs
      run: |
        dotnet new tool-manifest --force
        dotnet tool install GitVersion.Tool --version 6.3.0
        dotnet tool run dotnet-gitversion \
          /updateassemblyinfo Properties/AssemblyInfo.cs \
          /ensureassemblyinfo \
          /config gitversion.yml
          
    - name: Commit AssemblyInfo.cs UNIQUEMENT dans la branche cible
      if: github.ref == 'refs/heads/master' || github.base_ref == 'master' || github.base_ref == 'features'
      uses: Andro999b/push@v1.3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.base_ref }}
        force: true
        message: 'Mise à jour automatique de AssemblyInfo.cs avec GitVersion - ${{ github.run_number }}'
    
    #- name: Compilation
      #run: dotnet build --configuration Release --no-restore  # Compile l’application en mode Release sans refaire restore

    - name: Build project
    # Compile le projet principal avec la version générée
      #run: dotnet build --configuration Release --no-restore /p:Version=${{ steps.gitversion.outputs.fullSemVer }}
      run: dotnet build GestionBudgétaire.csproj --configuration Release --no-restore /p:Version=${{ steps.gitversion.outputs.assemblyFileVersion }}

    - name: Build test project
    # Compile le projet de test
      run: |
        dotnet build ../GestionBudgetTest/GestionBudgetaireTest.csproj --no-restore --verbosity quiet
    
    - name: Run tests
    # Exécute les tests avec sortie console détaillée et export au format TRX
      run: |
        dotnet test ../GestionBudgetTest/GestionBudgetaireTest.csproj \
          --no-restore \
          --no-build \
          --verbosity minimal \
          --logger "console;verbosity=detailed" \
          --logger "trx;LogFileName=TestResults.trx" \
          --results-directory ./TestResults       
        
    - name: Upload test results
    # Envoie les résultats des tests (fichier TRX) comme artefact GitHub Actions
      uses: actions/upload-artifact@v4
      with:
        name: TestResults
        path: ./TestResults